#summary An example of a the parse tree of a highly complex SQL statement
#labels Featured,Phase-Implementation

= Complex Example =

== Code ==
{{{
require_once('php-sql-parser.php');

$sql = 'select DISTINCT 1+2   c1, 1+ 2 as
`c2`, sum(c2),sum(c3) as sum_c3,"Status" = CASE
        WHEN quantity > 0 THEN \'in stock\'
        ELSE \'out of stock\'
        END case_statement
, t4.c1, (select c1+c2 from t1 inner_t1 limit 1) as subquery into @a1, @a2, @a3 from t1 the_t1 left outer join t2 using(c1,c2) join t3 as tX ON tX.c1 = the_t1.c1 join t4 t4_x using(x) where c1 = 1 and c2 in (1,2,3, "apple") and exists ( select 1 from some_other_table another_table where x > 1) and ("zebra" = "orange" or 1 = 1) group by 1, 2 having sum(c2) > 1 ORDER BY 2, c1 DESC LIMIT 0, 10 into outfile "/xyz" FOR UPDATE LOCK IN SHARE MODE';


$parser = new PHPSQLParser($sql);
print_r($parser->parsed);
}}}

== Output ==
{{{
Array
(
    [OPTIONS] => Array
        (
            [0] => DISTINCT
            [1] => FOR UPDATE
            [2] => LOCK IN SHARE MODE
        )

    [SELECT] => Array
        (
            [0] => Array
                (
                    [expr_type] => expression
                    [alias] => `c1`
                    [base_expr] => 1+2 
                    [sub_tree] => Array
                        (
                            [0] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 1
                                    [sub_tree] => 
                                )

                            [1] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => +
                                    [sub_tree] => 
                                )

                            [2] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 2
                                    [sub_tree] => 
                                )

                        )

                )

            [1] => Array
                (
                    [expr_type] => expression
                    [alias] => `c2`
                    [base_expr] => 1+ 2 
                    [sub_tree] => Array
                        (
                            [0] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 1
                                    [sub_tree] => 
                                )

                            [1] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => +
                                    [sub_tree] => 
                                )

                            [2] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 2
                                    [sub_tree] => 
                                )

                        )

                )

            [2] => Array
                (
                    [expr_type] => expression
                    [alias] => `sum(c2)`
                    [base_expr] => sum(c2)
                    [sub_tree] => Array
                        (
                            [0] => Array
                                (
                                    [expr_type] => aggregate_function
                                    [base_expr] => SUM
                                    [sub_tree] => 
                                )

                            [1] => Array
                                (
                                    [expr_type] => colref
                                    [base_expr] => (c2)
                                    [sub_tree] => 
                                )

                        )

                )

            [3] => Array
                (
                    [expr_type] => expression
                    [alias] => `sum_c3`
                    [base_expr] => sum(c3) 
                    [sub_tree] => Array
                        (
                            [0] => Array
                                (
                                    [expr_type] => aggregate_function
                                    [base_expr] => SUM
                                    [sub_tree] => 
                                )

                            [1] => Array
                                (
                                    [expr_type] => colref
                                    [base_expr] => (c3)
                                    [sub_tree] => 
                                )

                        )

                )

            [4] => Array
                (
                    [expr_type] => expression
                    [alias] => `case_statement`
                    [base_expr] => "Status" = CASE WHEN quantity > 0 THEN 'in stock' ELSE 'out of stock' END 
                    [sub_tree] => Array
                        (
                            [0] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => "Status"
                                    [sub_tree] => 
                                )

                            [1] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => =
                                    [sub_tree] => 
                                )

                            [2] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => CASE
                                    [sub_tree] => 
                                )

                            [3] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => WHEN
                                    [sub_tree] => 
                                )

                            [4] => Array
                                (
                                    [expr_type] => colref
                                    [base_expr] => quantity
                                    [sub_tree] => 
                                )

                            [5] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => >
                                    [sub_tree] => 
                                )

                            [6] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 0
                                    [sub_tree] => 
                                )

                            [7] => Array
                                (
                                    [expr_type] => reserved
                                    [base_expr] => THEN
                                    [sub_tree] => 
                                )

                            [8] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 'in stock'
                                    [sub_tree] => 
                                )

                            [9] => Array
                                (
                                    [expr_type] => reserved
                                    [base_expr] => ELSE
                                    [sub_tree] => 
                                )

                            [10] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 'out of stock'
                                    [sub_tree] => 
                                )

                            [11] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => END
                                    [sub_tree] => 
                                )

                        )

                )

            [5] => Array
                (
                    [expr_type] => colref
                    [alias] => `t4.c1`
                    [base_expr] => t4.c1
                    [sub_tree] => 
                )

            [6] => Array
                (
                    [expr_type] => subquery
                    [alias] => `subquery`
                    [base_expr] => select c1+c2 from t1 inner_t1 limit 1) as subquer
                    [sub_tree] => Array
                        (
                            [SELECT] => Array
                                (
                                    [0] => Array
                                        (
                                            [expr_type] => expression
                                            [alias] => `c2`
                                            [base_expr] => c1+
                                            [sub_tree] => Array
                                                (
                                                    [0] => Array
                                                        (
                                                            [expr_type] => colref
                                                            [base_expr] => c1
                                                            [sub_tree] => 
                                                        )

                                                    [1] => Array
                                                        (
                                                            [expr_type] => operator
                                                            [base_expr] => +
                                                            [sub_tree] => 
                                                        )

                                                )

                                        )

                                )

                            [FROM] => Array
                                (
                                    [0] => Array
                                        (
                                            [table] => t1
                                            [alias] => inner_t1
                                            [join_type] => JOIN
                                            [ref_type] => 
                                            [ref_clause] => 
                                            [base_expr] => 
                                            [sub_tree] => 
                                        )

                                )

                            [LIMIT] => Array
                                (
                                    [start] => 0
                                    [end] => 1
                                )

                        )

                )

        )

    [INTO] => Array
        (
            [0] => @a1
            [1] => ,
            [2] => @a2
            [3] => ,
            [4] => @a3
            [5] => 
            [6] => outfile
            [7] => 
            [8] => "/xyz"
            [9] => 
            [10] => UPDATE
            [11] => 
            [12] => IN
            [13] => 
            [14] => 
        )

    [FROM] => Array
        (
            [0] => Array
                (
                    [table] => t1
                    [alias] => the_t1
                    [join_type] => JOIN
                    [ref_type] => 
                    [ref_clause] => 
                    [base_expr] => 
                    [sub_tree] => 
                )

            [1] => Array
                (
                    [table] => t2
                    [alias] => t2
                    [join_type] => LEFT 
                    [ref_type] => USING
                    [ref_clause] => c1,c2
                    [base_expr] => 
                    [sub_tree] => 
                )

            [2] => Array
                (
                    [table] => t3
                    [alias] => tX
                    [join_type] => JOIN
                    [ref_type] => ON
                    [ref_clause] => tX.c1 = the_t1.c1
                    [base_expr] => 
                    [sub_tree] => 
                )

            [3] => Array
                (
                    [table] => t4
                    [alias] => t4_x
                    [join_type] => JOIN
                    [ref_type] => USING
                    [ref_clause] => x
                    [base_expr] => 
                    [sub_tree] => 
                )

        )

    [WHERE] => Array
        (
            [0] => Array
                (
                    [expr_type] => colref
                    [base_expr] => c1
                    [sub_tree] => 
                )

            [1] => Array
                (
                    [expr_type] => operator
                    [base_expr] => =
                    [sub_tree] => 
                )

            [2] => Array
                (
                    [expr_type] => const
                    [base_expr] => 1
                    [sub_tree] => 
                )

            [3] => Array
                (
                    [expr_type] => operator
                    [base_expr] => and
                    [sub_tree] => 
                )

            [4] => Array
                (
                    [expr_type] => colref
                    [base_expr] => c2
                    [sub_tree] => 
                )

            [5] => Array
                (
                    [expr_type] => operator
                    [base_expr] => in
                    [sub_tree] => 
                )

            [6] => Array
                (
                    [expr_type] => in-list
                    [base_expr] => (1,2,3, "apple")
                    [sub_tree] => Array
                        (
                            [0] => 1
                            [1] => 2
                            [2] => 3
                            [3] => "apple"
                        )

                )

            [7] => Array
                (
                    [expr_type] => operator
                    [base_expr] => and
                    [sub_tree] => 
                )

            [8] => Array
                (
                    [expr_type] => reserved
                    [base_expr] => EXISTS
                    [sub_tree] => 
                )

            [9] => Array
                (
                    [expr_type] => subquery
                    [base_expr] => ( select 1 from some_other_table another_table where x > 1)
                    [sub_tree] => Array
                        (
                            [SELECT] => Array
                                (
                                    [0] => Array
                                        (
                                            [expr_type] => const
                                            [alias] => `1`
                                            [base_expr] => 1
                                            [sub_tree] => 
                                        )

                                )

                            [FROM] => Array
                                (
                                    [0] => Array
                                        (
                                            [table] => some_other_table
                                            [alias] => another_table
                                            [join_type] => JOIN
                                            [ref_type] => 
                                            [ref_clause] => 
                                            [base_expr] => 
                                            [sub_tree] => 
                                        )

                                )

                            [WHERE] => Array
                                (
                                    [0] => Array
                                        (
                                            [expr_type] => colref
                                            [base_expr] => x
                                            [sub_tree] => 
                                        )

                                    [1] => Array
                                        (
                                            [expr_type] => operator
                                            [base_expr] => >
                                            [sub_tree] => 
                                        )

                                    [2] => Array
                                        (
                                            [expr_type] => const
                                            [base_expr] => 1
                                            [sub_tree] => 
                                        )

                                )

                        )

                )

            [10] => Array
                (
                    [expr_type] => operator
                    [base_expr] => and
                    [sub_tree] => 
                )

            [11] => Array
                (
                    [expr_type] => expression
                    [base_expr] => ("zebra" = "orange" or 1 = 1)
                    [sub_tree] => Array
                        (
                            [0] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => "zebra"
                                    [sub_tree] => 
                                )

                            [1] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => =
                                    [sub_tree] => 
                                )

                            [2] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => "orange"
                                    [sub_tree] => 
                                )

                            [3] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => or
                                    [sub_tree] => 
                                )

                            [4] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 1
                                    [sub_tree] => 
                                )

                            [5] => Array
                                (
                                    [expr_type] => operator
                                    [base_expr] => =
                                    [sub_tree] => 
                                )

                            [6] => Array
                                (
                                    [expr_type] => const
                                    [base_expr] => 1
                                    [sub_tree] => 
                                )

                        )

                )

        )

    [GROUP] => Array
        (
            [0] => Array
                (
                    [type] => pos
                    [base_expr] => 1
                    [direction] => ASC
                )

            [1] => Array
                (
                    [type] => pos
                    [base_expr] => 2
                    [direction] => ASC
                )

        )

    [HAVING] => Array
        (
            [0] => Array
                (
                    [expr_type] => aggregate_function
                    [base_expr] => SUM
                    [sub_tree] => 
                )

            [1] => Array
                (
                    [expr_type] => colref
                    [base_expr] => (c2)
                    [sub_tree] => 
                )

            [2] => Array
                (
                    [expr_type] => operator
                    [base_expr] => >
                    [sub_tree] => 
                )

            [3] => Array
                (
                    [expr_type] => const
                    [base_expr] => 1
                    [sub_tree] => 
                )

        )

    [ORDER] => Array
        (
            [0] => Array
                (
                    [type] => pos
                    [base_expr] => 2
                    [direction] => ASC
                )

            [1] => Array
                (
                    [type] => alias
                    [base_expr] => c1
                    [direction] => DESC
                )

        )

    [LIMIT] => Array
        (
            [start] => 0
            [end] => 10
        )

)


}}}