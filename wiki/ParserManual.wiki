#summary The php-sql-parser manual
#labels Featured,Phase-Implementation

= PHP-SQL-Parser Manual =

== How to integrate php-sql-parse into your application ==
The parser is a self contained class.  It does not require any PECL packages.  
----
   # Download the SQL parser file: http://php-sql-parser.googlecode.com/svn/trunk/php-sql-parser.php and place it into your include directory.
   # add *require_once*('php-sql-parser.php') to your application
   # Use the parser:
{{{
$parser = new PHPSQLParser();
$parsed = $parser->parse($sql);
print_r($parsed);
}}}

== Trying the examples ==
The best way to see how to use the parser is to look at the extensive examples, which you can get here:
   # Download the SQL parser file: http://php-sql-parser.googlecode.com/svn/trunk/example.php
   # Place it into the same location of php-sql-parse.php (if it isn't in your include path)
   # Execute the example:
{{{
php example.php
}}}

== Using the parser == 

===There are two ways in which you can parse statements===

   # Use the *constructor*
{{{ 
/* The constructor simply calls the parse() method on the provided SQL for convenience.*/
$parser = new PHPSQLParser('select 1');
print_r($parser->parsed);
}}}
   # Use the *parse*() method
{{{ 
$parser = new PHPSQLParser();
print_r($parser->parse('select 2')); /* this is okay, the tree is saved in the _parsed_ property.

/* get the tree for the last parsed statement */
$save = $parser->parsed;
}}}

There are no other public functions.

== Parse tree overview == 
The parsed representation returned by php-sql-parser is an associative array of important SQL sections and the information about the clauses in each of those sections.
 
Because this is easier to visualize, I'll provide a simple example:
===simple example===
----
{{{
<?php
  require_once('php-sql-parser.php');
  $parser=new PHPSQLParser('
SELECT a,b,c 
  from some_table an_alias
 WHERE d > 5;
');

  print_r($parser->parsed);  
}}}

*Output*
----
{{{
Array
( 
    [SELECT] => Array
        (
            [0] => Array
                (
                    [expr_type] => colref
                    [base_expr] => a
                    [sub_tree] => 
                    [alias] => `a`
                )

            [1] => Array
                (
                    [expr_type] => colref
                    [base_expr] => b
                    [sub_tree] => 
                    [alias] => `b`
                )

            [2] => Array
                (
                    [expr_type] => colref
                    [base_expr] => c
                    [sub_tree] => 
                    [alias] => `c`
                )

        )

    [FROM] => Array
        (
            [0] => Array
                (
                    [table] => some_table
                    [alias] => an_alias
                    [join_type] => JOIN
                    [ref_type] => 
                    [ref_clause] => 
                    [base_expr] => 
                    [sub_tree] => 
                )

        )

    [WHERE] => Array
        (
            [0] => Array
                (
                    [expr_type] => colref
                    [base_expr] => d
                    [sub_tree] => 
                )

            [1] => Array
                (
                    [expr_type] => operator
                    [base_expr] => >
                    [sub_tree] => 
                )

            [2] => Array
                (
                    [expr_type] => const
                    [base_expr] => 5
                    [sub_tree] => 
                )

        )

)
}}}

== Parse tree in detail ==

=== SELECT ===